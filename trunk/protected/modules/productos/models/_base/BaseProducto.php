<?php

/**
 * This is the model base class for the table "producto".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Producto".
 *
 * Columns in table "producto" available as properties of the model,
 * followed by relations of table "producto" available as properties of the model.
 *
 * @property integer $id
 * @property string $codigo
 * @property string $nombre
 * @property string $descripcion
 * @property integer $unidad_id
 * @property integer $subcategoria_producto_id
 * @property string $precio
 * @property string $marca
 * @property string $imagen
 * @property integer $fabricacion
 * @property string $estado
 * @property string $tipo
 *
 * @property ProductoSubcategoria $subcategoriaProducto
 * @property ProductoUnidad $unidad
 */
abstract class BaseProducto extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'producto';
    }

    public static function representingColumn() {
        return 'codigo';
    }

    public function rules() {
        return array(
            array('codigo, nombre, unidad_id, subcategoria_producto_id, tipo', 'required'),
            array('unidad_id, subcategoria_producto_id, fabricacion', 'numerical', 'integerOnly'=>true),
            array('codigo', 'length', 'max'=>15),
            array('nombre, marca', 'length', 'max'=>45),
            array('precio', 'length', 'max'=>10),
            array('imagen', 'length', 'max'=>512),
            array('estado, tipo', 'length', 'max'=>8),
            array('descripcion', 'safe'),
            array('estado', 'in', 'range' => array('ACTIVO','INACTIVO')), // enum,
            array('tipo', 'in', 'range' => array('BIEN','SERVICIO')), // enum,
            array('descripcion, precio, marca, imagen, fabricacion, estado', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, codigo, nombre, descripcion, unidad_id, subcategoria_producto_id, precio, marca, imagen, fabricacion, estado, tipo', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'subcategoriaProducto' => array(self::BELONGS_TO, 'ProductoSubcategoria', 'subcategoria_producto_id'),
            'unidad' => array(self::BELONGS_TO, 'ProductoUnidad', 'unidad_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'codigo' => Yii::t('app', 'Codigo'),
                'nombre' => Yii::t('app', 'Nombre'),
                'descripcion' => Yii::t('app', 'Descripcion'),
                'unidad_id' => Yii::t('app', 'Unidad'),
                'subcategoria_producto_id' => Yii::t('app', 'Subcategoria Producto'),
                'precio' => Yii::t('app', 'Precio'),
                'marca' => Yii::t('app', 'Marca'),
                'imagen' => Yii::t('app', 'Imagen'),
                'fabricacion' => Yii::t('app', 'Fabricacion'),
                'estado' => Yii::t('app', 'Estado'),
                'tipo' => Yii::t('app', 'Tipo'),
                'subcategoriaProducto' => null,
                'unidad' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('codigo', $this->codigo, true);
        $criteria->compare('nombre', $this->nombre, true);
        $criteria->compare('descripcion', $this->descripcion, true);
        $criteria->compare('unidad_id', $this->unidad_id);
        $criteria->compare('subcategoria_producto_id', $this->subcategoria_producto_id);
        $criteria->compare('precio', $this->precio, true);
        $criteria->compare('marca', $this->marca, true);
        $criteria->compare('imagen', $this->imagen, true);
        $criteria->compare('fabricacion', $this->fabricacion);
        $criteria->compare('estado', $this->estado, true);
        $criteria->compare('tipo', $this->tipo, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}