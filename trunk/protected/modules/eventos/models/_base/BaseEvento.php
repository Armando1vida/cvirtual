<?php

/**
 * This is the model base class for the table "evento".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Evento".
 *
 * Columns in table "evento" available as properties of the model,
 * followed by relations of table "evento" available as properties of the model.
 *
 * @property integer $id
 * @property string $nombre
 * @property string $descripcion
 * @property string $fecha_inicio
 * @property string $hora_inicio
 * @property string $fecha_fin
 * @property string $hora_fin
 * @property double $coords_x
 * @property double $coords_y
 * @property string $estado
 * @property string $entidad_tipo
 * @property integer $entidad_id
 * @property integer $usuario_creacion_id
 * @property integer $usuario_actualizacion_id
 * @property string $fecha_creacion
 * @property string $fecha_actualizacion
 * @property integer $evento_tipo_id
 * @property integer $evento_prioridad_id
 * @property integer $owner_id
 *
 * @property EventoPrioridad $eventoPrioridad
 * @property EventoTipo $eventoTipo
 */
abstract class BaseEvento extends AweActiveRecord {

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'evento';
    }

    public static function representingColumn() {
        return 'nombre';
    }

    public function rules() {
        return array(
            array('nombre, fecha_inicio, usuario_creacion_id, owner_id', 'required'),
            array('entidad_id, usuario_creacion_id, usuario_actualizacion_id, evento_tipo_id, evento_prioridad_id, owner_id', 'numerical', 'integerOnly' => true),
            array('coords_x, coords_y', 'numerical'),
            array('nombre, entidad_tipo', 'length', 'max' => 64),
            array('estado', 'length', 'max' => 8),
            array('descripcion, hora_inicio, fecha_fin, hora_fin, fecha_actualizacion', 'safe'),
            array('estado', 'in', 'range' => array('ACTIVO', 'INACTIVO')), // enum,
            array('descripcion, hora_inicio, fecha_fin, hora_fin, coords_x, coords_y, estado, entidad_tipo, entidad_id, usuario_actualizacion_id, fecha_actualizacion, evento_tipo_id, evento_prioridad_id', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, nombre, descripcion, fecha_inicio, hora_inicio, fecha_fin, hora_fin, coords_x, coords_y, estado, entidad_tipo, entidad_id, usuario_creacion_id, usuario_actualizacion_id, fecha_creacion, fecha_actualizacion, evento_tipo_id, evento_prioridad_id, permisos, owner_id', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'eventoPrioridad' => array(self::BELONGS_TO, 'EventoPrioridad', 'evento_prioridad_id'),
            'eventoTipo' => array(self::BELONGS_TO, 'EventoTipo', 'evento_tipo_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'nombre' => Yii::t('app', 'Nombre'),
            'descripcion' => Yii::t('app', 'Descripcion'),
            'fecha_inicio' => Yii::t('app', 'Fecha Inicio'),
            'hora_inicio' => Yii::t('app', 'Hora Inicio'),
            'fecha_fin' => Yii::t('app', 'Fecha Fin'),
            'hora_fin' => Yii::t('app', 'Hora Fin'),
            'coords_x' => Yii::t('app', 'Coords X'),
            'coords_y' => Yii::t('app', 'Coords Y'),
            'estado' => Yii::t('app', 'Estado'),
            'entidad_tipo' => Yii::t('app', 'Entitad Tipo'),
            'entidad_id' => Yii::t('app', 'Entidad'),
            'usuario_creacion_id' => Yii::t('app', 'Usuario Creacion'),
            'usuario_actualizacion_id' => Yii::t('app', 'Usuario Actualizacion'),
            'fecha_creacion' => Yii::t('app', 'Fecha Creacion'),
            'fecha_actualizacion' => Yii::t('app', 'Fecha Actualizacion'),
            'evento_tipo_id' => Yii::t('app', 'Evento Tipo'),
            'evento_prioridad_id' => Yii::t('app', 'Evento Prioridad'),
            'owner_id' => Yii::t('app', 'Owner'),
            'eventoPrioridad' => null,
            'eventoTipo' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('nombre', $this->nombre, true);
        $criteria->compare('descripcion', $this->descripcion, true);
        $criteria->compare('fecha_inicio', $this->fecha_inicio, true);
        $criteria->compare('hora_inicio', $this->hora_inicio, true);
        $criteria->compare('fecha_fin', $this->fecha_fin, true);
        $criteria->compare('hora_fin', $this->hora_fin, true);
        $criteria->compare('coords_x', $this->coords_x);
        $criteria->compare('coords_y', $this->coords_y);
        $criteria->compare('estado', $this->estado, true);
        $criteria->compare('entidad_tipo', $this->entidad_tipo, true);
        $criteria->compare('entidad_id', $this->entidad_id);
        $criteria->compare('usuario_creacion_id', $this->usuario_creacion_id);
        $criteria->compare('usuario_actualizacion_id', $this->usuario_actualizacion_id);
        $criteria->compare('fecha_creacion', $this->fecha_creacion, true);
        $criteria->compare('fecha_actualizacion', $this->fecha_actualizacion, true);
        $criteria->compare('evento_tipo_id', $this->evento_tipo_id);
        $criteria->compare('evento_prioridad_id', $this->evento_prioridad_id);
        $criteria->compare('owner_id', $this->owner_id);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => 'fecha_creacion',
                'updateAttribute' => 'fecha_actualizacion',
                'timestampExpression' => new CDbExpression('NOW()'),
            )
                ), parent::behaviors());
    }

}
