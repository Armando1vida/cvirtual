<?php

/**
 * This is the model base class for the table "direccion".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Direccion".
 *
 * Columns in table "direccion" available as properties of the model,
 * followed by relations of table "direccion" available as properties of the model.
 *
 * @property integer $id
 * @property string $calle_principal
 * @property string $calle_secundaria
 * @property string $numero
 * @property integer $ciudad_id
 * @property integer $provincia_id
 * @property integer $pais_id
 * @property double $coord_x
 * @property double $coord_y
 * @property string $referencia
 * @property string $tipo_entidad
 * @property integer $entidad_id
 *
 * @property Ciudad $ciudad
 */
abstract class BaseDireccion extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'direccion';
    }

    public static function representingColumn() {
        return 'tipo_entidad';
    }

    public function rules() {
        return array(
            array('id, ciudad_id, provincia_id, pais_id, tipo_entidad, entidad_id', 'required'),
            array('id, ciudad_id, provincia_id, pais_id, entidad_id', 'numerical', 'integerOnly'=>true),
            array('coord_x, coord_y', 'numerical'),
            array('calle_principal, calle_secundaria', 'length', 'max'=>64),
            array('numero, referencia', 'length', 'max'=>45),
            array('tipo_entidad', 'length', 'max'=>7),
            array('tipo_entidad', 'in', 'range' => array('EMPRESA','CLIENTE')), // enum,
            array('calle_principal, calle_secundaria, numero, coord_x, coord_y, referencia', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, calle_principal, calle_secundaria, numero, ciudad_id, provincia_id, pais_id, coord_x, coord_y, referencia, tipo_entidad, entidad_id', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'ciudad' => array(self::BELONGS_TO, 'Ciudad', 'ciudad_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'calle_principal' => Yii::t('app', 'Calle Principal'),
                'calle_secundaria' => Yii::t('app', 'Calle Secundaria'),
                'numero' => Yii::t('app', 'Numero'),
                'ciudad_id' => Yii::t('app', 'Ciudad'),
                'provincia_id' => Yii::t('app', 'Provincia'),
                'pais_id' => Yii::t('app', 'Pais'),
                'coord_x' => Yii::t('app', 'Coord X'),
                'coord_y' => Yii::t('app', 'Coord Y'),
                'referencia' => Yii::t('app', 'Referencia'),
                'tipo_entidad' => Yii::t('app', 'Tipo Entidad'),
                'entidad_id' => Yii::t('app', 'Entidad'),
                'ciudad' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('calle_principal', $this->calle_principal, true);
        $criteria->compare('calle_secundaria', $this->calle_secundaria, true);
        $criteria->compare('numero', $this->numero, true);
        $criteria->compare('ciudad_id', $this->ciudad_id);
        $criteria->compare('provincia_id', $this->provincia_id);
        $criteria->compare('pais_id', $this->pais_id);
        $criteria->compare('coord_x', $this->coord_x);
        $criteria->compare('coord_y', $this->coord_y);
        $criteria->compare('referencia', $this->referencia, true);
        $criteria->compare('tipo_entidad', $this->tipo_entidad, true);
        $criteria->compare('entidad_id', $this->entidad_id);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}